#V2
-- Product table (schema-full with embedded inventory)
DEFINE TABLE product SCHEMAFULL;
DEFINE FIELD name ON product TYPE string;
DEFINE FIELD calories ON product TYPE int ASSERT $value >= 0;
DEFINE FIELD price ON product TYPE int ASSERT $value > 0;
DEFINE FIELD bakery ON product TYPE record<bakery>; -- Direct link to bakery
DEFINE FIELD is_deleted ON product TYPE bool DEFAULT false;
-- Embedded inventory data
DEFINE FIELD inventory ON product TYPE object DEFAULT {    stock: 0,    last_updated: time::now()};
-- Order table (schema-full with embedded line items)
DEFINE TABLE order SCHEMAFULL;
DEFINE FIELD bakery ON order TYPE record<bakery>; -- Direct link to bakery
DEFINE FIELD is_deleted ON order TYPE bool DEFAULT false;
DEFINE FIELD created_at ON order TYPE datetime DEFAULT time::now();
-- Embedded order lines instead of separate table
DEFINE FIELD lines ON order TYPE array<object> DEFAULT [];
DEFINE FIELD lines.*.product ON order TYPE record<product>;
DEFINE FIELD lines.*.quantity ON order TYPE int ASSERT $value > 0;
DEFINE FIELD lines.*.price ON order TYPE int ASSERT $value > 0;
-- Graph relationship tables will be automatically managed by RELATE statements
-- =====================================================
-- DATA INSERTION
-- =====================================================
-- Create bakery
CREATE bakery:hill_valley SET    name = 'Hill Valley Bakery',    profit_margin = 15;
-- Create clients
CREATE client:marty SET    name = 'Marty McFly',    email = 'marty@gmail.com',    contact_details = '555-1955',    is_paying_client = true,    bakery = bakery:hill_valley;
CREATE client:doc SET    name = 'Doc Brown',    email = 'doc@brown.com',    contact_details = '555-1885',    is_paying_client = true,    bakery = bakery:hill_valley;
CREATE client:biff SET    name = 'Biff Tannen',    email = 'biff-3293@hotmail.com',    contact_details = '555-1955',    is_paying_client = false,    bakery = bakery:hill_valley,    metadata = {        notes: "Often late with payments",        credit_limit: 500    };
-- Create client->bakery relationships
RELATE client:marty->belongs_to->bakery:hill_valley SET joined_at = time::now();
RELATE client:doc->belongs_to->bakery:hill_valley SET joined_at = time::now();
RELATE client:biff->belongs_to->bakery:hill_valley SET joined_at = time::now();
-- Create products with embedded inventory
CREATE product:flux_cupcake SET    name = 'Flux Capacitor Cupcake',    calories = 300,    price = 120,    bakery = bakery:hill_valley,    inventory = {        stock: 50,        last_updated: time::now()    };
CREATE product:delorean_donut SET    name = 'DeLorean Doughnut',    calories = 250,    price = 135,    bakery = bakery:hill_valley,    inventory = {        stock: 30,        last_updated: time::now()    };
CREATE product:time_tart SET    name = 'Time Traveler Tart',    calories = 200,    price = 220,    bakery = bakery:hill_valley,    inventory = {        stock: 20,        last_updated: time::now()    };
CREATE product:sea_pie SET    name = 'Enchantment Under the Sea Pie',    calories = 350,    price = 299,    bakery = bakery:hill_valley,    inventory = {        stock: 15,        last_updated: time::now()    };
CREATE product:hover_cookies SET    name = 'Hoverboard Cookies',    calories = 150,    price = 199,    bakery = bakery:hill_valley,    inventory = {        stock: 40,        last_updated: time::now()    };
-- Create orders with embedded line items
-- Order 1: Marty's order
CREATE order:order1 SET    bakery = bakery:hill_valley,    lines = [        {            product: product:flux_cupcake,            quantity: 3,            price: 120        },        {            product: product:delorean_donut,            quantity: 1,            price: 135        },        {            product: product:hover_cookies,            quantity: 2,            price: 199        }    ];
-- Order 2: Doc's order
CREATE order:order2 SET    bakery = bakery:hill_valley,    lines = [        {            product: product:time_tart,            quantity: 1,            price: 220        }    ];
-- Order 3: Doc's second order
CREATE order:order3 SET    bakery = bakery:hill_valley,    lines = [        {            product: product:hover_cookies,            quantity: 5,            price: 199        }    ];
-- Create client->order relationships
RELATE client:marty->placed->order:order1 SET placed_at = time::now();
RELATE client:doc->placed->order:order2 SET placed_at = time::now();
RELATE client:doc->placed->order:order3 SET placed_at = time::now();
SELECT id, bakery FROM order;
 SELECT name, price, inventory.stock FROM product WHERE is_deleted = false;
 SELECT * FROM client:marty->placed->order;
 SELECT * FROM bakery:hill_valley->owns->product WHERE is_deleted = false;
 SELECT     id,     created_at,     lines[*].{         product_name: product.name,         quantity: quantity,         price: price,         subtotal: quantity * price     } AS items FROM order;
 SELECT DISTINCT <-placed<-client AS customers FROM order WHERE lines[*].product CONTAINS product:flux_cupcake;
 SELECT name, inventory.stock FROM product WHERE inventory.stock < 20 AND is_deleted = false;
 SELECT * FROM product WHERE bakery = bakery:hill_valley AND is_deleted = false;
 SELECT * FROM client WHERE bakery = bakery:hill_valley;
 SELECT name, price, inventory.stock AS stock FROM product WHERE is_deleted = false;
 SELECT name, price, inventory FROM product WHERE is_deleted = false;
 SELECT * FROM client:marty->placed->order;
 SELECT * FROM product WHERE bakery = bakery:hill_valley AND is_deleted = false;
 SELECT     id,     created_at,     lines[*].{         product_name: product.name,         quantity: quantity,         price: price,         subtotal: quantity * price     } AS items FROM order;
 SELECT DISTINCT <-placed<-client AS customers FROM order WHERE lines.product CONTAINS product:flux_cupcake;
 SELECT DISTINCT <-placed<-client AS customers FROM order WHERE array::len(lines[WHERE product = product:flux_cupcake]) > 0;
 SELECT name, inventory.stock FROM product WHERE bakery = bakery:hill_valley AND inventory.stock < 20 AND is_deleted = false;
 SELECT name, price, inventory.stock FROM product WHERE is_deleted = false;
 SELECT * FROM client:marty->placed->order;
 SELECT * FROM bakery:hill_valley->owns->product WHERE is_deleted = false;
 SELECT     id,     created_at,     lines[*].{         product_name: product.name,         quantity: quantity,         price: price,         subtotal: quantity * price     } AS items FROM order;
 SELECT DISTINCT <-placed<-client AS customers FROM order WHERE lines[*].product CONTAINS product:flux_cupcake;
 SELECT name, inventory.stock FROM product WHERE inventory.stock < 20 AND is_deleted = false;
 SELECT * FROM product WHERE bakery = bakery:hill_valley AND is_deleted = false;
 SELECT * FROM client WHERE bakery = bakery:hill_valley;
 SELECT name, price, inventory.stock AS stock FROM product WHERE is_deleted = false;
 SELECT name, price, inventory FROM product WHERE is_deleted = false;
 SELECT * FROM client:marty->placed->order WHERE bakery = bakery:hill_valley AND <-placed<-client.bakery = bakery:hill_valley;
 SELECT * FROM product WHERE bakery = bakery:hill_valley AND is_deleted = false;
 SELECT     id,     created_at,     lines[*].{         product_name: product.name,         quantity: quantity,         price: price,         subtotal: quantity * price     } AS items FROM order WHERE bakery = bakery:hill_valley;
 SELECT DISTINCT <-placed<-client AS customers FROM order WHERE lines.product CONTAINS product:flux_cupcake AND bakery = bakery:hill_valley AND <-placed<-client.bakery = bakery:hill_valley;
 SELECT DISTINCT <-placed<-client AS customers FROM order WHERE array::len(lines[WHERE product = product:flux_cupcake]) > 0 AND bakery = bakery:hill_valley AND <-placed<-client.bakery = bakery:hill_valley;
 SELECT name, inventory.stock FROM product WHERE bakery = bakery:hill_valley AND inventory.stock < 20 AND is_deleted = false;
SELECT * FROM client:marty->placed->order;
 SELECT name, price, inventory.stock FROM product WHERE is_deleted = false;
 SELECT * FROM client:marty->placed->order;
 SELECT * FROM bakery:hill_valley->owns->product WHERE is_deleted = false;
 SELECT     id,     created_at,     lines[*].{         product_name: product.name,         quantity: quantity,         price: price,         subtotal: quantity * price     } AS items FROM order;
 SELECT DISTINCT <-placed<-client AS customers FROM order WHERE lines[*].product CONTAINS product:flux_cupcake;
 SELECT name, inventory.stock FROM product WHERE inventory.stock < 20 AND is_deleted = false;
 SELECT * FROM product WHERE bakery = bakery:hill_valley AND is_deleted = false;
 SELECT * FROM client WHERE bakery = bakery:hill_valley;
 SELECT name, price, inventory.stock AS stock FROM product WHERE is_deleted = false;
 SELECT name, price, inventory FROM product WHERE is_deleted = false;
 SELECT * FROM client:marty->placed->order WHERE bakery = bakery:hill_valley;
 SELECT * FROM product WHERE bakery = bakery:hill_valley AND is_deleted = false;
 SELECT     id,     created_at,     lines[*].{         product_name: product.name,         quantity: quantity,         price: price,         subtotal: quantity * price     } AS items FROM order WHERE bakery = bakery:hill_valley;
 SELECT DISTINCT <-placed<-client AS customers FROM order WHERE lines.product CONTAINS product:flux_cupcake AND bakery = bakery:hill_valley;
 SELECT DISTINCT <-placed<-client AS customers FROM order WHERE array::len(lines[WHERE product = product:flux_cupcake]) > 0 AND bakery = bakery:hill_valley;
 SELECT name, inventory.stock FROM product WHERE bakery = bakery:hill_valley AND inventory.stock < 20 AND is_deleted = false;
